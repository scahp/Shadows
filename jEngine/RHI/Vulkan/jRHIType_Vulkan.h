#pragma once
#include "../jRHIType.h"

FORCEINLINE VkFilter GetVulkanTextureFilterType(ETextureFilter type)
{
    using T = VkFilter;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST, VK_FILTER_NEAREST),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR, VK_FILTER_LINEAR),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_NEAREST, VK_FILTER_NEAREST),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_NEAREST, VK_FILTER_LINEAR),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_LINEAR, VK_FILTER_NEAREST),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_LINEAR, VK_FILTER_LINEAR)
    );
}

FORCEINLINE VkSamplerAddressMode GetVulkanTextureAddressMode(ETextureAddressMode type)
{
    using T = VkSamplerAddressMode;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureAddressMode::REPEAT, VK_SAMPLER_ADDRESS_MODE_REPEAT),
        CONVERSION_TYPE_ELEMENT(ETextureAddressMode::MIRRORED_REPEAT, VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT),
        CONVERSION_TYPE_ELEMENT(ETextureAddressMode::CLAMP_TO_EDGE, VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE),
        CONVERSION_TYPE_ELEMENT(ETextureAddressMode::CLAMP_TO_BORDER, VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER),
        CONVERSION_TYPE_ELEMENT(ETextureAddressMode::MIRROR_CLAMP_TO_EDGE, VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE)
    );
}

FORCEINLINE VkSamplerMipmapMode GetVulkanTextureMipmapMode(ETextureFilter type)
{
    using T = VkSamplerMipmapMode;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST, VK_SAMPLER_MIPMAP_MODE_NEAREST),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR, VK_SAMPLER_MIPMAP_MODE_NEAREST),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_NEAREST, VK_SAMPLER_MIPMAP_MODE_NEAREST),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_NEAREST, VK_SAMPLER_MIPMAP_MODE_NEAREST),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::NEAREST_MIPMAP_LINEAR, VK_SAMPLER_MIPMAP_MODE_LINEAR),
        CONVERSION_TYPE_ELEMENT(ETextureFilter::LINEAR_MIPMAP_LINEAR, VK_SAMPLER_MIPMAP_MODE_LINEAR)
    );
}

FORCEINLINE auto GetVulkanTextureFormat(ETextureFormat type)
{
    using T = VkFormat;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB8, VK_FORMAT_R8G8B8_UNORM),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB32F, VK_FORMAT_R32G32B32_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB16F, VK_FORMAT_R16G16B16_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R11G11B10F, VK_FORMAT_B10G11R11_UFLOAT_PACK32),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8, VK_FORMAT_R8G8B8A8_UNORM),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA16F, VK_FORMAT_R16G16B16A16_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA32F, VK_FORMAT_R32G32B32A32_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8I, VK_FORMAT_R8G8B8A8_SINT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8UI, VK_FORMAT_R8G8B8A8_UINT),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::BGRA8, VK_FORMAT_B8G8R8A8_UNORM),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::R8, VK_FORMAT_R8_UNORM),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R16F, VK_FORMAT_R16_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32F, VK_FORMAT_R32_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32UI, VK_FORMAT_R32_UINT),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG8, VK_FORMAT_R8G8_UNORM),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG16F, VK_FORMAT_R16G16_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG32F, VK_FORMAT_R32G32_SFLOAT),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16, VK_FORMAT_D16_UNORM),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16_S8, VK_FORMAT_D16_UNORM_S8_UINT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24, VK_FORMAT_X8_D24_UNORM_PACK32),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24_S8, VK_FORMAT_D24_UNORM_S8_UINT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32, VK_FORMAT_D32_SFLOAT),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32_S8, VK_FORMAT_D32_SFLOAT_S8_UINT)
    );
}

FORCEINLINE auto GetVulkanTextureComponentCount(ETextureFormat type)
{
    using T = int8;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB8, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB32F, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGB16F, 3),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R11G11B10F, 3),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA16F, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA32F, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8I, 4),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RGBA8UI, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::BGRA8, 4),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::R8, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R16F, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32F, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::R32UI, 1),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG16F, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::RG32F, 2),

        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D16_S8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D24_S8, 2),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32, 1),
        CONVERSION_TYPE_ELEMENT(ETextureFormat::D32_S8, 2)
    );
}

FORCEINLINE void GetVulkanAttachmentLoadStoreOp(VkAttachmentLoadOp& OutLoadOp, VkAttachmentStoreOp& OutStoreOp, EAttachmentLoadStoreOp InType)
{
    switch (InType)
    {
    case EAttachmentLoadStoreOp::LOAD_STORE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_STORE;
        break;
    case EAttachmentLoadStoreOp::LOAD_DONTCARE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        break;
    case EAttachmentLoadStoreOp::CLEAR_STORE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_STORE;
        break;
    case EAttachmentLoadStoreOp::CLEAR_DONTCARE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        break;
    case EAttachmentLoadStoreOp::DONTCARE_STORE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_STORE;
        break;
    case EAttachmentLoadStoreOp::DONTCARE_DONTCARE:
        OutLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        OutStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        break;
    case EAttachmentLoadStoreOp::MAX:
    default:
        check(0);
        break;
    }
}

FORCEINLINE auto GetVulkanShaderAccessFlags(EShaderAccessStageFlag type)
{
    switch (type)
    {
    case EShaderAccessStageFlag::VERTEX:
        return VK_SHADER_STAGE_VERTEX_BIT;
    case EShaderAccessStageFlag::TESSELLATION_CONTROL:
        return VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT;
    case EShaderAccessStageFlag::TESSELLATION_EVALUATION:
        return VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT;
    case EShaderAccessStageFlag::GEOMETRY:
        return VK_SHADER_STAGE_GEOMETRY_BIT;
    case EShaderAccessStageFlag::FRAGMENT:
        return VK_SHADER_STAGE_FRAGMENT_BIT;
    case EShaderAccessStageFlag::COMPUTE:
        return VK_SHADER_STAGE_COMPUTE_BIT;
    case EShaderAccessStageFlag::ALL_GRAPHICS:
        return VK_SHADER_STAGE_ALL_GRAPHICS;
    case EShaderAccessStageFlag::ALL:
        return VK_SHADER_STAGE_ALL;
    default:
        check(0);
        break;
    }
    return VK_SHADER_STAGE_ALL;
}

FORCEINLINE VkPrimitiveTopology GetVulkanPrimitiveTopology(EPrimitiveType type)
{
    using T = VkPrimitiveTopology;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::POINTS, VK_PRIMITIVE_TOPOLOGY_POINT_LIST),
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::LINES, VK_PRIMITIVE_TOPOLOGY_LINE_LIST),
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::LINES_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY),
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::LINE_STRIP_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP),
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLES, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST),
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLES_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY),
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLE_STRIP_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY),
        CONVERSION_TYPE_ELEMENT(EPrimitiveType::TRIANGLE_STRIP, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP)
    );
}

FORCEINLINE VkPolygonMode GetVulkanPolygonMode(EPolygonMode type)
{
    using T = VkPolygonMode;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(EPolygonMode::POINT, VK_POLYGON_MODE_POINT),
        CONVERSION_TYPE_ELEMENT(EPolygonMode::LINE, VK_POLYGON_MODE_LINE),
        CONVERSION_TYPE_ELEMENT(EPolygonMode::FILL, VK_POLYGON_MODE_FILL)
    );
}

FORCEINLINE VkCullModeFlagBits GetVulkanCullMode(ECullMode type)
{
    using T = VkCullModeFlagBits;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ECullMode::NONE, VK_CULL_MODE_NONE),
        CONVERSION_TYPE_ELEMENT(ECullMode::BACK, VK_CULL_MODE_BACK_BIT),
        CONVERSION_TYPE_ELEMENT(ECullMode::FRONT, VK_CULL_MODE_FRONT_BIT),
        CONVERSION_TYPE_ELEMENT(ECullMode::FRONT_AND_BACK, VK_CULL_MODE_FRONT_AND_BACK)
    );
}

FORCEINLINE VkFrontFace GetVulkanFrontFace(EFrontFace type)
{
    using T = VkFrontFace;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(EFrontFace::CW, VK_FRONT_FACE_CLOCKWISE),
        CONVERSION_TYPE_ELEMENT(EFrontFace::CCW, VK_FRONT_FACE_COUNTER_CLOCKWISE)
    );
}

FORCEINLINE VkStencilOp GetVulkanStencilOp(EStencilOp type)
{
    using T = VkStencilOp;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(EStencilOp::KEEP, VK_STENCIL_OP_KEEP),
        CONVERSION_TYPE_ELEMENT(EStencilOp::ZERO, VK_STENCIL_OP_ZERO),
        CONVERSION_TYPE_ELEMENT(EStencilOp::REPLACE, VK_STENCIL_OP_REPLACE),
        CONVERSION_TYPE_ELEMENT(EStencilOp::INCR, VK_STENCIL_OP_INCREMENT_AND_CLAMP),
        CONVERSION_TYPE_ELEMENT(EStencilOp::INCR_WRAP, VK_STENCIL_OP_INCREMENT_AND_WRAP),
        CONVERSION_TYPE_ELEMENT(EStencilOp::DECR, VK_STENCIL_OP_DECREMENT_AND_CLAMP),
        CONVERSION_TYPE_ELEMENT(EStencilOp::DECR_WRAP, VK_STENCIL_OP_DECREMENT_AND_WRAP),
        CONVERSION_TYPE_ELEMENT(EStencilOp::INVERT, VK_STENCIL_OP_INVERT)
    );
}

FORCEINLINE VkCompareOp GetVulkanCompareOp(ECompareOp type)
{
    using T = VkCompareOp;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(ECompareOp::NEVER, VK_COMPARE_OP_NEVER),
        CONVERSION_TYPE_ELEMENT(ECompareOp::LESS, VK_COMPARE_OP_LESS),
        CONVERSION_TYPE_ELEMENT(ECompareOp::EQUAL, VK_COMPARE_OP_EQUAL),
        CONVERSION_TYPE_ELEMENT(ECompareOp::LEQUAL, VK_COMPARE_OP_LESS_OR_EQUAL),
        CONVERSION_TYPE_ELEMENT(ECompareOp::GREATER, VK_COMPARE_OP_GREATER),
        CONVERSION_TYPE_ELEMENT(ECompareOp::NOTEQUAL, VK_COMPARE_OP_NOT_EQUAL),
        CONVERSION_TYPE_ELEMENT(ECompareOp::GEQUAL, VK_COMPARE_OP_GREATER_OR_EQUAL),
        CONVERSION_TYPE_ELEMENT(ECompareOp::ALWAYS, VK_COMPARE_OP_ALWAYS)
    );
}

FORCEINLINE VkBlendFactor GetVulkanBlendFactor(EBlendFactor type)
{
    using T = VkBlendFactor;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ZERO, VK_BLEND_FACTOR_ZERO),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE, VK_BLEND_FACTOR_ONE),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::SRC_COLOR, VK_BLEND_FACTOR_SRC_COLOR),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_SRC_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::DST_COLOR, VK_BLEND_FACTOR_DST_COLOR),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_DST_COLOR, VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::SRC_ALPHA, VK_BLEND_FACTOR_SRC_ALPHA),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_SRC_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::DST_ALPHA, VK_BLEND_FACTOR_DST_ALPHA),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_DST_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::CONSTANT_COLOR, VK_BLEND_FACTOR_CONSTANT_COLOR),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_CONSTANT_COLOR, VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::CONSTANT_ALPHA, VK_BLEND_FACTOR_CONSTANT_ALPHA),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::ONE_MINUS_CONSTANT_ALPHA, VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA),
        CONVERSION_TYPE_ELEMENT(EBlendFactor::SRC_ALPHA_SATURATE, VK_BLEND_FACTOR_SRC_ALPHA_SATURATE)
    );
}

FORCEINLINE VkBlendOp GetVulkanBlendOp(EBlendOp type)
{
    using T = VkBlendOp;
    GENERATE_STATIC_CONVERSION_ARRAY(
        CONVERSION_TYPE_ELEMENT(EBlendOp::ADD, VK_BLEND_OP_ADD),
        CONVERSION_TYPE_ELEMENT(EBlendOp::SUBTRACT, VK_BLEND_OP_SUBTRACT),
        CONVERSION_TYPE_ELEMENT(EBlendOp::REVERSE_SUBTRACT, VK_BLEND_OP_REVERSE_SUBTRACT),
        CONVERSION_TYPE_ELEMENT(EBlendOp::MIN_VALUE, VK_BLEND_OP_MIN),
        CONVERSION_TYPE_ELEMENT(EBlendOp::MAX_VALUE, VK_BLEND_OP_MAX)
    );
}

FORCEINLINE VkColorComponentFlags GetVulkanBlendOp(EColorMask type)
{
    VkColorComponentFlags result = 0;

    if (EColorMask::NONE == type)
        return result;

    if (EColorMask::ALL == type)
    {
        result = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT
            | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
    }
    else
    {
        if ((int32)EColorMask::R & (int32)type) result |= VK_COLOR_COMPONENT_R_BIT;
        if ((int32)EColorMask::G & (int32)type) result |= VK_COLOR_COMPONENT_G_BIT;
        if ((int32)EColorMask::B & (int32)type) result |= VK_COLOR_COMPONENT_B_BIT;
        if ((int32)EColorMask::A & (int32)type) result |= VK_COLOR_COMPONENT_A_BIT;
    }
    return result;
}
